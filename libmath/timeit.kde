import libmath;

fun demo(x){
	return libmath.floor(x);
}

fun pause()
 {
 `Function pause()
-----------------------------------
parameter
---------
None.

returns- None
-------
Pauses the program until enter is pressed.\n`;
  var b=inputPwd("Press enter to continue...");
  free();
 }
 
 fun rand()
 { 
 `Function rand()
-----------------------------------
 parameter
 --------- 
 None.

returns-- None
-------
Generates a pseudo random number in the range 0-1.\n`;
  var a=now()%100;
  a=((3*a+23)%10)/10.0;
  return a;
  }

fun random(a,b)
{
`Function random(a,b)
-----------------------------------
 parameter -- a,b two integers
 --------- 
returns--a pseudo random number in the range(a,b).\n`;
	try{a=a.asInt();b=b.asInt();
	var x=(1-rand());
	if(a>b)return ((x*(a-b)+b)\1).asInt();
	else return ((x*(b-a)+a)\1).asInt();}
	except(Error as e)
	{raise e.skip(1);}
}

fun max(varargin)
{
`Function max(varargin)
 -----------------------------------
 parameter
 ---------
 Comma seperated Numbers or Strings like max(1,2,3) or only a List of Numbers or Strings like max([1,2,3]).

 returns
 -------
 The maximum of the numbers or the maximum of the numbers of the List.\n`;
	if(len(varargin)==1)
	{
		if(isinstance(varargin[0],List))
		{
			var m=varargin[0][0];
			try
			{
				for(var i=1;i<len(varargin[0]);i=i+1)
				{
					if(varargin[0][i]>m)m=varargin[0][i];
				}
				return m;}
			except(Error as e)
			{
				raise e.skip(1);
			}
		}
		else if (len(varargin)==1) return varargin[0];
	}
	else
	{
		var m=varargin[0];
		try
		{
			for(var i=1;i<len(varargin);i=i+1)
			{
				if(varargin[i]>m)m=varargin[i];
			}
			return m;
		}
		except(Error as e)
		{
			raise e.skip(1);
		}
	}
}


fun copy(l)
{
	var n = len(l); 
	var arr=[];
	for(var d=0;d<n;d=d+1)
	{
		arr.append(l[d]);
	}
	return arr;
}

fun heapify(arr, n, i)
{
	var largest = i ;
	var l = 2 * i + 1;	 
	var r = 2 * i +2;	
	try{ 
	if( l<n and arr[i]<arr[l])largest = l;
	if (r<n and arr[largest]<arr[r])largest = r; 
	if (largest != i)
	{
		var t = arr[largest];
		arr[largest]=arr[i];
		arr[i]=t;
	heapify(arr, n, largest);
	} }
	except(Error as e){raise e.skip(2);}
} 
fun Sort(arr1)
{
`Function Sort(list)
 -----------------------------------
 parameter--A list.
 returns----Another list with all elements sorted.\n`;
	var n = len(arr1); 
	var arr=[];
	for(var d=0;d<n;d=d+1)
	{
		arr.append(arr1[d]);
	}
	for(var i=n/2-1;i>=0;i=i-1)heapify(arr, n, i); 
	for(var j=n-1;j>0;j=j-1)
	{
		var temp=arr[0];
		arr[0]=arr[j];
		arr[j]=temp;
		heapify(arr,j,0);
	}
	return arr;
}
