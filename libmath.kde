fun isNumber(m)
{
	try{
		Number(String(m));
		return True;
	} except {
		return False;
	}
}

fun isNatural(m)
{
	if(isNumber(m))
	{
		var c=String(m);
		var l=[];
		for(var r=0;r<10;r=r+1)l.append(String(r));
		var k=0;
		for(var i=0;i<len(c);i=i+1){for(var j=0;j<10;j=j+1){if(c[i]==l[j])k=k+1;}}
		if(k<len(c) or k==0)return False;
		else return True;
	}
	else return False;
}

fun gcd(m,n)
{ 

	if(m==n) return m;
	else if(m==0) return n;
	else if(n==0) return m;
	else if(n>m) return gcd(n,m);
	else if(m==0 and n==0) print("Nan");
	else return gcd(m%n,n);
}

fun lcm(m,n)
{
	var x=m*n;
	return x/gcd(m,n);
}

fun factorial(x)
{
	if(isNatural(x)) 
	{
		if(x==0 or x==1)return 1;
		var fact = 1;
		for(var i=x;i>0;i=i-1) fact=fact*i;
		return fact;
	}
	else print("Argument must be a nonnegative integer.");
}

fun abs(x)
{
	if(isNumber(x)) 
	{
		if(x>0 or x==0) return x;
		else return -x;
	}
	else print("Argument must be a number.");
}

fun comb(n, k){
	if(!isNatural(n)) print("Argument n must be a nonnegative integer");
	if(!isNatural(k)) print("Argument k must be a nonnegative integer");
	if(k<=n) return factorial(n) / (factorial(k) * factorial(n-k));
	else return 0;
}

fun perm(n, k)
{
	if(!isNatural(n)) print("Argument n must be a nonnegative integer");
	if(!isNatural(k)) print("Argument k must be a nonnegative integer");
	if(k<=n)return comb(n,k)*factorial(k);
	else return 0;
}

fun isPrime(m)
{
	if(isNatural(m))
	{
		var t=0;
		var b=Number(m);
		var s=b**0.5;
		if(b==1 or b==0)t=1;
		else if(b==2 or b==3)t=0;
		else if(b%6==1 or b%6==5){for(var x=5;x<=s;x=x+2){if(b%x==0){t=1;break;}}}
		else t=1;
		if(t==1)return False;
		else return True;
	}
	else print("Argument must be a nonnegative integer");
}

fun ceil(x)
{
	if(!isNumber(x)) print("Argument x must be a number");
	else{if(x%1!=0) return (x+1)\1;
	else return x;}
}

fun floor(x)
{
	if(!isNumber(x))print("Argument x must be a number");
	else return x\1;
}

var e=2.7182818284590452354;

var pi=3.14159265358979323846;



